name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  release:
    types: [created]

env:
  PROJECT_NAME: ILP

jobs:
  # ---------- LINUX 可移植构建（debian:12 基线） ----------
  build-linux-portable:
    runs-on: ubuntu-22.04
    container:
      image: debian:12
    steps:
      - id: commit-hash
        uses: prompt/actions-commit-hash@v3

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install toolchain & system deps
        run: |
          set -eux
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
            build-essential cmake git pkg-config patchelf \
            libssl-dev zlib1g-dev libcurl4-openssl-dev libsqlite3-dev
          # 若项目本身已自带/自动构建三方库，可删除下方三段源码安装

      # ---- 如需较新共享库：fmt / cpr / SQLiteCpp（shared）----
      - name: Build & install fmt (shared)
        run: |
          set -eux
          git clone https://github.com/fmtlib/fmt.git
          cd fmt
          git checkout 10.2.1
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DFMT_DOC=OFF -DFMT_TEST=OFF
          cmake --build build -j"$(nproc)"
          cmake --install build
          ldconfig

      - name: Build & install cpr (shared, use system curl/openssl)
        run: |
          set -eux
          git clone https://github.com/libcpr/cpr.git
          cd cpr
          git submodule update --init --recursive
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON \
                -DCPR_USE_SYSTEM_CURL=ON -DCPR_ENABLE_SSL=ON
          cmake --build build -j"$(nproc)"
          cmake --install build
          ldconfig

      - name: Build & install SQLiteCpp (shared, use system sqlite3)
        run: |
          set -eux
          git clone https://github.com/SRombauts/SQLiteCpp.git
          cd SQLiteCpp
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON \
                -DSQLITECPP_INTERNAL_SQLITE=OFF -DSQLITECPP_BUILD_TESTS=OFF -DSQLITECPP_BUILD_EXAMPLES=OFF
          cmake --build build -j"$(nproc)"
          cmake --install build
          ldconfig

      # ---- 用“标准 CMake”配置 & 构建（不使用 Presets）----
      - name: Configure (std)
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release

      - name: Build (std)
        run: cmake --build build --config Release --parallel

      - name: Prepare dist & bundle .so
        shell: bash
        run: |
          set -eux
          mkdir -p dist/lib

          # 尝试在常见输出位置寻找可执行文件名，若不同请改 PROJECT_NAME 或路径
          if [ -f "build/${{ env.PROJECT_NAME }}" ]; then
            cp "build/${{ env.PROJECT_NAME }}" dist/ILP
          else
            # 递归寻找一个可执行文件名为 ILP 的目标
            found=$(find build -type f -perm -111 -name "${{ env.PROJECT_NAME }}" | head -n1 || true)
            if [ -z "$found" ]; then
              echo "ERROR: Cannot find built executable named '${{ env.PROJECT_NAME }}' under build/"
              exit 1
            fi
            cp "$found" dist/ILP
          fi

          chmod +x dist/ILP

          # 自动收集依赖 .so 到 dist/lib
          ldd dist/ILP | awk '/=>/ && $3 ~ /^\// {print $3}' | xargs -I{} cp -n {} dist/lib/ || true

          # 写入 RPATH：让程序在自身 lib/ 下查找
          patchelf --set-rpath '$ORIGIN/lib' dist/ILP

          echo "==== bundled libs ===="
          ls -l dist/lib || true

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux-${{ steps.commit-hash.outputs.short }}
          path: dist/**

  # ---------- WINDOWS 静态构建（单文件 EXE） ----------
  build-windows-static:
    runs-on: windows-latest
    steps:
      - id: commit-hash
        uses: prompt/actions-commit-hash@v3

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11

      - name: Install deps (static)
        run: |
          vcpkg install cpr:x64-windows-static sqlite3:x64-windows-static fmt:x64-windows-static
        shell: pwsh

      - name: Configure (std)
        run: >
          cmake -B build -S .
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake"
          -DVCPKG_TARGET_TRIPLET=x64-windows-static
          -DBUILD_SHARED_LIBS=OFF
          -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
        shell: pwsh

      - name: Build (std)
        run: cmake --build build --config Release --parallel
        shell: pwsh

      - name: Collect Windows artifact
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          $exe = Join-Path build 'Release\ILP.exe'
          if (!(Test-Path $exe)) {
            $exe = Get-ChildItem -Path build -Recurse -Filter ILP.exe | Select-Object -First 1 | % { $_.FullName }
          }
          if (!(Test-Path $exe)) { throw "Cannot find ILP.exe under build/" }
          Copy-Item $exe dist\ILP.exe
        shell: pwsh

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-${{ steps.commit-hash.outputs.short }}
          path: dist\ILP.exe

  # ---------- 发布：把两端产物附到 Release ----------
  release:
    needs: [build-linux-portable, build-windows-static]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: Linux-${{ github.ref_name }}
          path: ./release-artifacts/linux/

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: Windows-${{ github.ref_name }}
          path: ./release-artifacts/windows/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          files: |
            ./release-artifacts/linux/**
            ./release-artifacts/windows/ILP.exe
          token: ${{ secrets.GH_TOKEN }}
